import type {HTMLAttributeReferrerPolicy} from 'react'
import {JSX as JSX_2} from 'react/jsx-runtime'
import {SanityDocument} from 'sanity'

export declare function Iframe(props: IframeProps): JSX_2.Element

export declare interface IframeOptions {
  /**
   * If you have multiple iframe instances side-by-side you need to give each a unique key.
   */
  key?: string
  url:
    | string
    | UrlResolver
    | {
        /**
         * The URL origin of where the preview is hosted, for example `https://example.com`.
         * If it's an embedded Studio then set it to `'same-origin'`.
         */
        origin: 'same-origin' | string
        /**
         * The route to redirect to after enabling Draft Mode.
         * If you don't have enough data to build the URL, return an `Error` instance to show an error message.
         * @example `return new Error('Missing slug')`
         * To prolong the loading state, return `undefined`
         */
        preview: string | UrlResolver
        /**
         * The route that enables Draft Mode
         * @example '/api/draft'
         */
        draftMode: string
      }
  defaultSize?: IframeSizeKey
  showDisplayUrl?: boolean
  reload?: {
    button?: boolean
  }
  attributes?: Partial<{
    allow: string
    referrerPolicy: HTMLAttributeReferrerPolicy | undefined
    sandbox: string
    onLoad: () => void
  }>
}

export declare interface IframeProps {
  document: {
    displayed: SanityDocument
    draft: SanityDocument | null
    published: SanityDocument | null
  }
  options: IframeOptions
}

export declare type IframeSizeKey = keyof SizeProps

export declare type Size = 'desktop' | 'mobile'

export declare type SizeProps = {
  [key in Size]: {
    width: string | number
    height: string | number
  }
}

export declare type UrlResolver = (
  document: SanityDocument | null,
) => string | Error | undefined | Promise<string | Error | undefined>

export {}
